{"ast":null,"code":"var _jsxFileName = \"D:\\\\Full Stack WebAPP\\\\src\\\\contexts\\\\AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport toast from 'react-hot-toast';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport const useAuth = () => {\n  _s();\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n_s(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    // Check for stored user data on app load\n    const storedUser = localStorage.getItem('ipo_user');\n    if (storedUser) {\n      setUser(JSON.parse(storedUser));\n    } else {\n      // Auto-login as admin for demo purposes\n      const defaultAdmin = {\n        id: '3',\n        name: 'Admin User',\n        email: 'admin@university.com',\n        role: 'admin',\n        department: 'Administration'\n      };\n      setUser(defaultAdmin);\n      localStorage.setItem('ipo_user', JSON.stringify(defaultAdmin));\n    }\n    setLoading(false);\n  }, []);\n  const login = async (email, password, role) => {\n    try {\n      setLoading(true);\n\n      // Mock API call - replace with actual backend integration\n      const mockUsers = {\n        student: {\n          id: '1',\n          name: 'John Doe',\n          email: 'john@student.com',\n          role: 'student',\n          department: 'Computer Science',\n          studentId: 'CS2023001'\n        },\n        faculty: {\n          id: '2',\n          name: 'Dr. Jane Smith',\n          email: 'jane@faculty.com',\n          role: 'faculty',\n          department: 'Computer Science',\n          facultyId: 'FAC001'\n        },\n        admin: {\n          id: '3',\n          name: 'Admin User',\n          email: 'admin@university.com',\n          role: 'admin',\n          department: 'Administration'\n        }\n      };\n\n      // Simulate API delay\n      await new Promise(resolve => setTimeout(resolve, 1000));\n      const userData = mockUsers[role];\n      if (!userData) {\n        throw new Error('Invalid role');\n      }\n      setUser(userData);\n      localStorage.setItem('ipo_user', JSON.stringify(userData));\n      toast.success(`Welcome back, ${userData.name}!`);\n      return userData;\n    } catch (error) {\n      toast.error('Login failed. Please check your credentials.');\n      throw error;\n    } finally {\n      setLoading(false);\n    }\n  };\n  const logout = () => {\n    setUser(null);\n    localStorage.removeItem('ipo_user');\n    toast.success('Logged out successfully');\n  };\n  const value = {\n    user,\n    login,\n    logout,\n    loading\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 105,\n    columnNumber: 5\n  }, this);\n};\n_s2(AuthProvider, \"NiO5z6JIqzX62LS5UWDgIqbZYyY=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","toast","jsxDEV","_jsxDEV","AuthContext","useAuth","_s","context","Error","AuthProvider","children","_s2","user","setUser","loading","setLoading","storedUser","localStorage","getItem","JSON","parse","defaultAdmin","id","name","email","role","department","setItem","stringify","login","password","mockUsers","student","studentId","faculty","facultyId","admin","Promise","resolve","setTimeout","userData","success","error","logout","removeItem","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/Full Stack WebAPP/src/contexts/AuthContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\r\nimport toast from 'react-hot-toast';\r\n\r\nconst AuthContext = createContext();\r\n\r\nexport const useAuth = () => {\r\n  const context = useContext(AuthContext);\r\n  if (!context) {\r\n    throw new Error('useAuth must be used within an AuthProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  const [user, setUser] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    // Check for stored user data on app load\r\n    const storedUser = localStorage.getItem('ipo_user');\r\n    if (storedUser) {\r\n      setUser(JSON.parse(storedUser));\r\n    } else {\r\n      // Auto-login as admin for demo purposes\r\n      const defaultAdmin = {\r\n        id: '3',\r\n        name: 'Admin User',\r\n        email: 'admin@university.com',\r\n        role: 'admin',\r\n        department: 'Administration'\r\n      };\r\n      setUser(defaultAdmin);\r\n      localStorage.setItem('ipo_user', JSON.stringify(defaultAdmin));\r\n    }\r\n    setLoading(false);\r\n  }, []);\r\n\r\n  const login = async (email, password, role) => {\r\n    try {\r\n      setLoading(true);\r\n      \r\n      // Mock API call - replace with actual backend integration\r\n      const mockUsers = {\r\n        student: {\r\n          id: '1',\r\n          name: 'John Doe',\r\n          email: 'john@student.com',\r\n          role: 'student',\r\n          department: 'Computer Science',\r\n          studentId: 'CS2023001'\r\n        },\r\n        faculty: {\r\n          id: '2',\r\n          name: 'Dr. Jane Smith',\r\n          email: 'jane@faculty.com',\r\n          role: 'faculty',\r\n          department: 'Computer Science',\r\n          facultyId: 'FAC001'\r\n        },\r\n        admin: {\r\n          id: '3',\r\n          name: 'Admin User',\r\n          email: 'admin@university.com',\r\n          role: 'admin',\r\n          department: 'Administration'\r\n        }\r\n      };\r\n\r\n      // Simulate API delay\r\n      await new Promise(resolve => setTimeout(resolve, 1000));\r\n\r\n      const userData = mockUsers[role];\r\n      if (!userData) {\r\n        throw new Error('Invalid role');\r\n      }\r\n\r\n      setUser(userData);\r\n      localStorage.setItem('ipo_user', JSON.stringify(userData));\r\n      \r\n      toast.success(`Welcome back, ${userData.name}!`);\r\n      \r\n      return userData;\r\n    } catch (error) {\r\n      toast.error('Login failed. Please check your credentials.');\r\n      throw error;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const logout = () => {\r\n    setUser(null);\r\n    localStorage.removeItem('ipo_user');\r\n    toast.success('Logged out successfully');\r\n  };\r\n\r\n  const value = {\r\n    user,\r\n    login,\r\n    logout,\r\n    loading\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={value}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}